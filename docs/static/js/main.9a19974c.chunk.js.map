{"version":3,"sources":["serviceWorker.js","rootReducer.js","components/homePage/sectionOne/SectionOne.js","components/homePage/sectionTwo/SectionTwo.js","components/homePage/sectionThree/SectionThree.js","components/app/App.js","index.js","store.js"],"names":["Boolean","window","location","hostname","match","combineReducers","SectionOne","react_default","a","createElement","className","Component","SectionTwo","SectionThree","poster","autoPlay","muted","loop","controls","src","App","StrictMode","homePage_sectionOne_SectionOne","homePage_sectionTwo_SectionTwo","homePage_sectionThree_SectionThree","ReactDOM","render","es","store","arguments","length","undefined","createStore","rootReducer","configureStore","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8EChBSC,cAAgB,2CC4BhBC,0LAzBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,kBAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,6CAnBaE,cCYVC,0LAVX,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,oCANiBE,cCeVE,0LAbX,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SAAOK,OAAO,qCAAqCC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACC,UAAQ,GAC7EX,EAAAC,EAAAC,cAAA,UAAQU,IAAI,kCADd,gDAIAZ,EAAAC,EAAAC,cAAA,8DACAF,EAAAC,EAAAC,cAAA,mFATmBE,cCcZS,mLAVX,OACEb,EAAAC,EAAAC,cAACF,EAAAC,EAAMa,WAAP,KACEd,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cANUb,aCGlBc,IAASC,OACPnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAUC,MCNG,WACX,OADsDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC/CG,YAAYC,GDKJC,IACf3B,EAAAC,EAAAC,cAAC0B,EAAD,OAEFC,SAASC,eAAe,SNiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9a19974c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\r\n\r\nexport default combineReducers({})","import React, { Component } from 'react';\r\nimport './SectionOne.scss';\r\n\r\nclass SectionOne extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-one\">\r\n        <div className=\"content-wrapper\">\r\n          <div className=\"technologies\">\r\n            <div className=\"flex-row first-row\">\r\n              <p>JavaScript</p>\r\n              <p>HTML</p>\r\n              <p>React</p>\r\n            </div>\r\n            <div className=\"flex-row second-row\">\r\n              <p>Node</p>\r\n              <p>Redux</p>\r\n              <p>CSS</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"avatar-wrapper\">\r\n            <div className=\"avatar\"/>\r\n            <p>Tomasz Chybzi≈Ñski</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SectionOne;","import React, { Component } from 'react';\r\nimport \"./SectionTwo.scss\"\r\n\r\nclass SectionTwo extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-two\">\r\n        <p>Welcome</p>\r\n        <p>I'm glad you are here</p>\r\n        <p>Enjoy exploring</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SectionTwo;","import React, { Component } from 'react';\r\nimport \"./SectionThree.scss\";\r\n\r\nclass SectionThree extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"section-three\">\r\n        <video poster=\"../../../assets/manTypingFrame.PNG\" autoPlay muted loop controls>\r\n          <source src=\"../../../assets/manTyping.mp4\"/>\r\n          Your browser does not support the video tag.\r\n        </video>\r\n        <p>This awesome videos are possible because of HTML5</p>\r\n        <p>Check all the technologies I used to create this website below</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SectionThree;","import React, { Component } from 'react';\r\nimport SectionOne from \"../homePage/sectionOne/SectionOne\";\r\nimport SectionTwo from \"../homePage/sectionTwo/SectionTwo\";\r\nimport SectionThree from \"../homePage/sectionThree/SectionThree\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.StrictMode>\r\n        <SectionOne/>\r\n        <SectionTwo/>\r\n        <SectionThree/>\r\n      </React.StrictMode>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport App from \"./components/app/App\";\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nexport default function configureStore(initialState = {}) {\r\n    return createStore(rootReducer);\r\n}"],"sourceRoot":""}